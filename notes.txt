The most digestible explanation I found was https://www.ycombinator.com/library/3v-how-to-build-an-oembed-integration-for-your-startup

NPG builds a special version of a post (album or image) that is designed to live in an iframe.
NPG has a 'get' endpoint that knows to take parameters (url, maxwidth, maxheight, and format) and kicks out an JSON response
That JSON response includes the HTML of the iframe (based on item 1)

For example, if you looked on my WordPress site here's a recent post:

https://halfelf.org/2021/hugo-deployment-via-github-actions/

That includes this:

   <link rel="alternate" type="application/json+oembed" href="https://halfelf.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fhalfelf.org%2F2021%2Fhugo-deployment-via-github-actions%2F"/>
    <link rel="alternate" type="text/xml+oembed" href="https://halfelf.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fhalfelf.org%2F2021%2Fhugo-deployment-via-github-actions%2F&#038;format=xml"/>
Which is so the oembed is 'discoverable' by other apps.

And that URL is what kicks out the 'embed' content:

https://halfelf.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fhalfelf.org%2F2021%2Fhugo-deployment-via-github-actions%2F

{
  "version": "1.0",
  "provider_name": "Half-Elf on Tech",
  "provider_url": "https://halfelf.org",
  "author_name": "Ipstenu (Mika Epstein)",
  "author_url": "https://halfelf.org/author/ipstenu/",
  "title": "Hugo Deployment via GitHub Actions - Half-Elf on Tech",
  "type": "rich",
  "width": 600,
  "height": 338,
  "html": "<blockquote class=\"wp-embedded-content\"><a href=\"https://halfelf.org/2021/hugo-deployment-via-github-actions/\">Hugo Deployment via GitHub Actions</a></blockquote>\n<script type='text/javascript'>\n<!--//--><![CDATA[//><!--\n\t\t/*! This file is auto-generated */\n\t\t!function(c,d){\"use strict\";var e=!1,n=!1;if(d.querySelector)if(c.addEventListener)e=!0;if(c.wp=c.wp||{},!c.wp.receiveEmbedMessage)if(c.wp.receiveEmbedMessage=function(e){var t=e.data;if(t)if(t.secret||t.message||t.value)if(!/[^a-zA-Z0-9]/.test(t.secret)){for(var r,a,i,s=d.querySelectorAll('iframe[data-secret=\"'+t.secret+'\"]'),n=d.querySelectorAll('blockquote[data-secret=\"'+t.secret+'\"]'),o=0;o<n.length;o++)n[o].style.display=\"none\";for(o=0;o<s.length;o++)if(r=s[o],e.source===r.contentWindow){if(r.removeAttribute(\"style\"),\"height\"===t.message){if(1e3<(i=parseInt(t.value,10)))i=1e3;else if(~~i<200)i=200;r.height=i}if(\"link\"===t.message)if(a=d.createElement(\"a\"),i=d.createElement(\"a\"),a.href=r.getAttribute(\"src\"),i.href=t.value,i.host===a.host)if(d.activeElement===r)c.top.location.href=t.value}}},e)c.addEventListener(\"message\",c.wp.receiveEmbedMessage,!1),d.addEventListener(\"DOMContentLoaded\",t,!1),c.addEventListener(\"load\",t,!1);function t(){if(!n){n=!0;for(var e,t,r=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),a=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=d.querySelectorAll(\"iframe.wp-embedded-content\"),s=0;s<i.length;s++){if(!(e=i[s]).getAttribute(\"data-secret\"))t=Math.random().toString(36).substr(2,10),e.src+=\"#?secret=\"+t,e.setAttribute(\"data-secret\",t);if(r||a)(t=e.cloneNode(!0)).removeAttribute(\"security\"),e.parentNode.replaceChild(t,e)}}}}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://halfelf.org/2021/hugo-deployment-via-github-actions/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Hugo Deployment via GitHub Actions&#8221; &#8212; Half-Elf on Tech\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe>",
  "thumbnail_url": "https://i1.wp.com/halfelf.org/wp-content/uploads/sites/2/2021/09/david-gavi-EEuhA0VpGDk-unsplash.jpg?fit=1200%2C675&ssl=1",
  "thumbnail_width": 1200,
  "thumbnail_height": 675,
  "description": "Using GitHub actions to build and deploy a static site is fun."
}
That hefty chunk in "html" is the magic sauce. WordPress has a blockquote 'fallback' but the iframe is:

<iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://halfelf.org/2021/hugo-deployment-via-github-actions/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Hugo Deployment via GitHub Actions&#8221; &#8212; Half-Elf on Tech\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe>
Which you can see is calling https://halfelf.org/2021/hugo-deployment-via-github-actions/embed/ and if you look at that URL you see a heavily truncated version of the site.

So you end up needing two 'new' urls:

https://example.com/gallery/album/image.html?embed -- the iframe version of it all
https://example.com/gallery/api/embed?url=... - the json returner that gets added as a link= call
I think the gotchas would be:

Designing the default output (as you can see, WP's is messy)
Deciding if that should be customizable by a theme (I'd say yes, but that makes more work)
Oh and making the API URL because there really isn't one (?) in NPG


The original plugin that built WP's code is here: https://github.com/swissspidy/oEmbed-API

And there's a Zenphoto plugin that kind of does this: https://github.com/deanmoses/zenphoto-json-rest-api

I haven't looked too much into that plugin but that's my weekend to-do and maybe I can get a working prototype that is more 2021.

As for teaching WordPress what to do, it's a matter of telling WP "If someone pastes in a URL, check for the oembed discovery." Which it already does. And it knows "OH! I got a return AND it has HTML? Good! I'll echo that!" But that's all on WP's end, and I'm pretty sure it would be able to do it automagically since discovery exists by default there (and if not? Well that's 100% on me to solve!)
